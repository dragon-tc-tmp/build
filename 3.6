#!/bin/bash
# Copyright (C) 2015 Joe Maples
#
# Licensed under the Apache License, Version 2.0 (the "License");
#   You may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Define Color Values
red=$(tput setaf 1) # red
grn=$(tput setaf 2) # green
blu=$(tput setaf 4) # blue
cya=$(tput setaf 6) # cyan
txtbld=$(tput bold) # Bold
bldred=${txtbld}$(tput setaf 1) # red
bldgrn=${txtbld}$(tput setaf 2) # green
bldblu=${txtbld}$(tput setaf 4) # blue
bldcya=${txtbld}$(tput setaf 6) # cyan
txtrst=$(tput sgr0) # Reset

###########################################################################
###########################################################################
#####                                                                 #####
#####              B U I L D   C O N F I G U R A T I O N              #####
#####                                                                 #####
###########################################################################
###########################################################################

# Find Source Root
cd ../ && export TOOLCHAIN_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

# Make sure LLVM and friends are at the correct version, 3.6
cd $TOOLCHAIN_ROOT/llvm && git reset --hard && git fetch https://github.com/dragon-tc/llvm.git release_36 && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/tools/clang && git reset --hard && git fetch https://github.com/dragon-tc/clang.git release_36 && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/tools/polly && git reset --hard && git fetch https://github.com/dragon-tc/polly.git release_36 && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/projects/compiler-rt && git reset --hard && git fetch https://github.com/dragon-tc/compiler-rt.git release_36 && git checkout FETCH_HEAD;
cd $TOOLCHAIN_ROOT/llvm/projects/openmp && git reset --hard && git fetch https://github.com/dragon-tc/openmp.git release_36 && git checkout FETCH_HEAD;

# Find Host OS and set OS specific variables
IS_DARWIN=$(uname -a | grep Darwin)
if [ -n "$IS_DARWIN" ]; then
  CPUS=$(sysctl hw.ncpu | awk '{print $2}')
  DATE=gdate
else
  CPUS=$(grep "^processor" /proc/cpuinfo | wc -l)
  DATE=date
fi;

# Optimize CPU Threads
JOBS=$(bc <<< "$CPUS+1");

# Clean ISL
if [ -e $TOOLCHAIN_ROOT/isl/Makefile ];
then
    cd $TOOLCHAIN_ROOT/isl;
    make $MAKE_FLAGS clean;
    make $MAKE_FLAGS distclean;
fi;

# Export Prefix Path
export PREFIX_PATH=$TOOLCHAIN_ROOT/out/3.6;

if [ -d "$PREFIX_PATH" ];
then
    rm -rf $PREFIX_PATH;
    mkdir -p $PREFIX_PATH;
else
    mkdir -p $PREFIX_PATH;
fi;

# Build ISL
if ! [ -e $TOOLCHAIN_ROOT/out/isl.made ];
then
  cd $TOOLCHAIN_ROOT/isl;
  ./configure --enable-static --enable-shared;
  if ! make $MAKE_FLAGS; then
    echo "ISL failed to build.";
    exit 1;
  else
    sudo make install;
    touch $TOOLCHAIN_ROOT/out/isl.made;	
  fi;
fi;

# Configure LLVM with CMAKE
if [ -e $TOOLCHAIN_ROOT/cmake ];
then
    rm -rf $TOOLCHAIN_ROOT/cmake;
fi;
mkdir $TOOLCHAIN_ROOT/cmake;
cd $TOOLCHAIN_ROOT/cmake;

cmake -DLINK_POLLY_INTO_TOOLS:Bool=ON -DCMAKE_CXX_FLAGS:STRING="-O3 -Wno-macro-redefined -fpermissive -fPIC -pipe" -DCMAKE_C_FLAGS:STRING="-O3 -Wno-macro-redefined -fPIC -pipe" -DLLVM_ENABLE_PIC:BOOL=ON -DCMAKE_INSTALL_PREFIX:Path=$PREFIX_PATH -DLLVM_PARALLEL_COMPILE_JOBS=$JOBS -DLLVM_PARALLEL_LINK_JOBS=$JOBS -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_WARNINGS:BOOL=OFF -DLLVM_ENABLE_WERROR:BOOL=OFF -DLLVM_USE_SANITIZER:STRING=Address -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_BUILD_DOXYGEN:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_BINUTILS_INCDIR=$TOOLCHAIN_ROOT/llvm/tools/binutils/include -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" -DCMAKE_BUILD_TYPE:STRING=Release -DPACKAGE_VERSION:STRING="3.6.x-DragonTC" $TOOLCHAIN_ROOT/llvm;

# Find Time Before Build 
START_TIME=$($DATE +%s);

# Build LLVM
if ! time cmake --build .; then
  echo "LLVM failed to build.";
  exit 1;
else
  cmake --build . --target install;
  # Echo Time if Build Finishes
  END_TIME=$($DATE +%s);
  tmin=$(( (END_TIME-START_TIME)/60 ));
  tsec=$(( (END_TIME-START_TIME)%60 ));
  echo -e ${bldgrn}"Total time elapsed:${txtrst} ${grn}$tmin minutes $tsec seconds"${txtrst};
fi;
